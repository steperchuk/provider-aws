/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClassificationTypeObservation struct {
}

type ClassificationTypeParameters struct {

	// A string value indicating that Macie perform a one-time classification of all of the existing objects in the bucket.
	// The only valid value is the default value, FULL.
	// +kubebuilder:validation:Optional
	Continuous *string `json:"continuous,omitempty" tf:"continuous,omitempty"`

	// A string value indicating whether or not Macie performs a one-time classification of all of the existing objects in the bucket.
	// Valid values are NONE and FULL. Defaults to NONE indicating that Macie only classifies objects that are added after the association was created.
	// +kubebuilder:validation:Optional
	OneTime *string `json:"oneTime,omitempty" tf:"one_time,omitempty"`
}

type S3BucketAssociationObservation struct {

	// The ID of the association.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type S3BucketAssociationParameters struct {

	// The name of the S3 bucket that you want to associate with Amazon Macie.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// The configuration of how Amazon Macie classifies the S3 objects.
	// +kubebuilder:validation:Optional
	ClassificationType []ClassificationTypeParameters `json:"classificationType,omitempty" tf:"classification_type,omitempty"`

	// The ID of the Amazon Macie member account whose S3 resources you want to associate with Macie. If member_account_id isn't specified, the action associates specified S3 resources with Macie for the current master account.
	// +kubebuilder:validation:Optional
	MemberAccountID *string `json:"memberAccountId,omitempty" tf:"member_account_id,omitempty"`

	// Object key prefix identifying one or more S3 objects to which the association applies.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// S3BucketAssociationSpec defines the desired state of S3BucketAssociation
type S3BucketAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     S3BucketAssociationParameters `json:"forProvider"`
}

// S3BucketAssociationStatus defines the observed state of S3BucketAssociation.
type S3BucketAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        S3BucketAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketAssociation is the Schema for the S3BucketAssociations API. Associates an S3 resource with Amazon Macie for monitoring and data classification.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type S3BucketAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3BucketAssociationSpec   `json:"spec"`
	Status            S3BucketAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketAssociationList contains a list of S3BucketAssociations
type S3BucketAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3BucketAssociation `json:"items"`
}

// Repository type metadata.
var (
	S3BucketAssociation_Kind             = "S3BucketAssociation"
	S3BucketAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: S3BucketAssociation_Kind}.String()
	S3BucketAssociation_KindAPIVersion   = S3BucketAssociation_Kind + "." + CRDGroupVersion.String()
	S3BucketAssociation_GroupVersionKind = CRDGroupVersion.WithKind(S3BucketAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&S3BucketAssociation{}, &S3BucketAssociationList{})
}
